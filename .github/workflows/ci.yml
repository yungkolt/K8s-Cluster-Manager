name: K8s Cluster Manager CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest black
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Format check with black
      run: |
        black --check src/

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-mock
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Test with pytest
      run: |
        pytest

  terraform-validate:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
    
    - name: Terraform Format Check
      run: |
        cd infra/aws
        terraform fmt -check
        cd ../../infra/azure
        terraform fmt -check
    
    - name: Terraform Validate AWS
      run: |
        cd infra/aws
        terraform init -backend=false
        terraform validate
    
    - name: Terraform Validate Azure
      run: |
        cd infra/azure
        terraform init -backend=false
        terraform validate

  security-scan:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner for Python
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'
    
    - name: Run tfsec
      uses: aquasecurity/tfsec-action@master
      with:
        working_directory: infra

  build:
    runs-on: ubuntu-latest
    needs: [test, terraform-validate, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Build package
      run: |
        python -m build
    
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  deploy-demo:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: demo
    steps:
    - uses: actions/checkout@v3
    
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install dist/*.whl
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
    
    - name: Terraform Apply Demo AWS Cluster
      run: |
        cd infra/aws
        terraform init
        terraform apply -auto-approve -var="cluster_name=demo-cluster" -var="environment=demo"
    
    - name: Get kubeconfig
      run: |
        mkdir -p ~/.kube
        cp infra/aws/kubeconfig_demo-cluster ~/.kube/config
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
    
    - name: Deploy monitoring
      run: |
        python src/monitoring.py --kubeconfig ~/.kube/config setup
    
    - name: Apply security hardening
      run: |
        python src/security.py --kubeconfig ~/.kube/config harden
